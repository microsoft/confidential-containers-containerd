From 710b3b51cef7df8779935630fdfb726846776928 Mon Sep 17 00:00:00 2001
From: Mitch Zhu <zhumc11@gmail.com>
Date: Tue, 19 Mar 2024 16:15:41 -0700
Subject: [PATCH 1/3] Skip image pull only if the correct snapshotter has a
 snapshot

Given the following situation: snapshotter X has a snapshot for the
image for which ensureImageExists was called, but the sandbox is trying
to use snapshotter Y (which doesn't have a snapshot for this image).
Without this patch, ensureImageExists skips image pulling because
localResolve returns an image, which results in the sandbox failing to
start.

With this patch, we only skip image pulling if the snapshotter the
sandbox wants to use has a snapshot. So for the case above, it doesn't
skip.

To perform this check locally, we now keep track of the snapshotters in
the local image store.

Signed-off-by: Mitch Zhu <mitchzhu@microsoft.com>
---
 internal/cri/server/container_status_test.go  |  2 +-
 internal/cri/server/images/image_pull.go      | 17 +++++++----
 internal/cri/server/podsandbox/controller.go  |  2 +-
 internal/cri/server/podsandbox/sandbox_run.go | 30 +++++++++++--------
 internal/cri/server/service.go                |  2 +-
 internal/cri/store/image/image.go             | 29 ++++++++++++++----
 6 files changed, 54 insertions(+), 28 deletions(-)

diff --git a/internal/cri/server/container_status_test.go b/internal/cri/server/container_status_test.go
index 05b165024..71dcc10ae 100644
--- a/internal/cri/server/container_status_test.go
+++ b/internal/cri/server/container_status_test.go
@@ -302,7 +302,7 @@ func (s *fakeImageService) LocalResolve(refOrID string) (imagestore.Image, error
 
 func (s *fakeImageService) ImageFSPaths() map[string]string { return make(map[string]string) }
 
-func (s *fakeImageService) PullImage(context.Context, string, func(string) (string, string, error), *runtime.PodSandboxConfig, string) (string, error) {
+func (s *fakeImageService) PullImage(context.Context, string, func(string) (string, string, error), *runtime.PodSandboxConfig, string, string) (string, error) {
 	return "", errors.New("not implemented")
 }
 
diff --git a/internal/cri/server/images/image_pull.go b/internal/cri/server/images/image_pull.go
index 488136b43..3d8af09f5 100644
--- a/internal/cri/server/images/image_pull.go
+++ b/internal/cri/server/images/image_pull.go
@@ -96,6 +96,15 @@ import (
 
 // PullImage pulls an image with authentication config.
 func (c *GRPCCRIImageService) PullImage(ctx context.Context, r *runtime.PullImageRequest) (_ *runtime.PullImageResponse, err error) {
+	imageRef := r.GetImage().GetImage()
+	snapshotter, err := c.snapshotterFromPodSandboxConfig(ctx, imageRef, r.SandboxConfig)
+	if err != nil {
+		return nil, err
+	}
+	return c.pullImage(ctx, r, snapshotter)
+}
+
+func (c *GRPCCRIImageService) pullImage(ctx context.Context, r *runtime.PullImageRequest, snapshotter string) (_ *runtime.PullImageResponse, err error) {
 
 	imageRef := r.GetImage().GetImage()
 
@@ -110,14 +119,14 @@ func (c *GRPCCRIImageService) PullImage(ctx context.Context, r *runtime.PullImag
 		return ParseAuth(hostauth, host)
 	}
 
-	ref, err := c.CRIImageService.PullImage(ctx, imageRef, credentials, r.SandboxConfig, r.GetImage().GetRuntimeHandler())
+	ref, err := c.CRIImageService.PullImage(ctx, imageRef, credentials, r.SandboxConfig, r.GetImage().GetRuntimeHandler(), snapshotter)
 	if err != nil {
 		return nil, err
 	}
 	return &runtime.PullImageResponse{ImageRef: ref}, nil
 }
 
-func (c *CRIImageService) PullImage(ctx context.Context, name string, credentials func(string) (string, string, error), sandboxConfig *runtime.PodSandboxConfig, runtimeHandler string) (_ string, err error) {
+func (c *CRIImageService) PullImage(ctx context.Context, name string, credentials func(string) (string, string, error), sandboxConfig *runtime.PodSandboxConfig, runtimeHandler string, snapshotter string) (_ string, err error) {
 	span := tracing.SpanFromContext(ctx)
 	defer func() {
 		// TODO: add domain label for imagePulls metrics, and we may need to provide a mechanism
@@ -167,10 +176,6 @@ func (c *CRIImageService) PullImage(ctx context.Context, name string, credential
 	)
 
 	defer pcancel()
-	snapshotter, err := c.snapshotterFromPodSandboxConfig(ctx, ref, sandboxConfig)
-	if err != nil {
-		return "", err
-	}
 	log.G(ctx).Debugf("PullImage %q with snapshotter %s", ref, snapshotter)
 	span.SetAttributes(
 		tracing.Attribute("image.ref", ref),
diff --git a/internal/cri/server/podsandbox/controller.go b/internal/cri/server/podsandbox/controller.go
index 0dc46bb10..4165fc207 100644
--- a/internal/cri/server/podsandbox/controller.go
+++ b/internal/cri/server/podsandbox/controller.go
@@ -110,7 +110,7 @@ type RuntimeService interface {
 type ImageService interface {
 	LocalResolve(refOrID string) (imagestore.Image, error)
 	GetImage(id string) (imagestore.Image, error)
-	PullImage(ctx context.Context, name string, creds func(string) (string, string, error), sc *runtime.PodSandboxConfig, runtimeHandler string) (string, error)
+	PullImage(ctx context.Context, name string, creds func(string) (string, string, error), sc *runtime.PodSandboxConfig, runtimeHandler string, snapshotter string) (string, error)
 	RuntimeSnapshotter(ctx context.Context, ociRuntime criconfig.Runtime) string
 	PinnedImage(string) string
 }
diff --git a/internal/cri/server/podsandbox/sandbox_run.go b/internal/cri/server/podsandbox/sandbox_run.go
index 702b56801..8999864bd 100644
--- a/internal/cri/server/podsandbox/sandbox_run.go
+++ b/internal/cri/server/podsandbox/sandbox_run.go
@@ -77,23 +77,25 @@ func (c *Controller) Start(ctx context.Context, id string) (cin sandbox.Controll
 
 	sandboxImage := c.getSandboxImageName()
 	// Ensure sandbox container image snapshot.
-	image, err := c.ensureImageExists(ctx, sandboxImage, config, metadata.RuntimeHandler)
+	ociRuntime, err := c.config.GetSandboxRuntime(config, metadata.RuntimeHandler)
 	if err != nil {
-		return cin, fmt.Errorf("failed to get sandbox image %q: %w", sandboxImage, err)
+		return cin, fmt.Errorf("failed to get sandbox runtime: %w", err)
 	}
+	log.G(ctx).WithField("podsandboxid", id).Debugf("use OCI runtime %+v", ociRuntime)
 
-	containerdImage, err := c.toContainerdImage(ctx, *image)
+	labels["oci_runtime_type"] = ociRuntime.Type
+
+	snapshotter := c.imageService.RuntimeSnapshotter(ctx, ociRuntime)
+
+	image, err := c.ensureImageExists(ctx, sandboxImage, config, metadata.RuntimeHandler, snapshotter)
 	if err != nil {
-		return cin, fmt.Errorf("failed to get image from containerd %q: %w", image.ID, err)
+		return cin, fmt.Errorf("failed to get sandbox image %q: %w", sandboxImage, err)
 	}
 
-	ociRuntime, err := c.config.GetSandboxRuntime(config, metadata.RuntimeHandler)
+	containerdImage, err := c.toContainerdImage(ctx, *image)
 	if err != nil {
-		return cin, fmt.Errorf("failed to get sandbox runtime: %w", err)
+		return cin, fmt.Errorf("failed to get image from containerd %q: %w", image.ID, err)
 	}
-	log.G(ctx).WithField("podsandboxid", id).Debugf("use OCI runtime %+v", ociRuntime)
-
-	labels["oci_runtime_type"] = ociRuntime.Type
 
 	// Create sandbox container root directories.
 	sandboxRootDir := c.getSandboxRootDir(id)
@@ -173,7 +175,7 @@ func (c *Controller) Start(ctx context.Context, id string) (cin sandbox.Controll
 	snapshotterOpt = append(snapshotterOpt, extraSOpts...)
 
 	opts := []containerd.NewContainerOpts{
-		containerd.WithSnapshotter(c.imageService.RuntimeSnapshotter(ctx, ociRuntime)),
+		containerd.WithSnapshotter(snapshotter),
 		customopts.WithNewSnapshot(id, containerdImage, snapshotterOpt...),
 		containerd.WithSpec(spec, specOpts...),
 		containerd.WithContainerLabels(sandboxLabels),
@@ -299,17 +301,19 @@ func (c *Controller) Create(_ctx context.Context, info sandbox.Sandbox, opts ...
 	return c.store.Save(podSandbox)
 }
 
-func (c *Controller) ensureImageExists(ctx context.Context, ref string, config *runtime.PodSandboxConfig, runtimeHandler string) (*imagestore.Image, error) {
+func (c *Controller) ensureImageExists(ctx context.Context, ref string, config *runtime.PodSandboxConfig, runtimeHandler string, snapshotter string) (*imagestore.Image, error) {
 	image, err := c.imageService.LocalResolve(ref)
 	if err != nil && !errdefs.IsNotFound(err) {
 		return nil, fmt.Errorf("failed to get image %q: %w", ref, err)
 	}
 	if err == nil {
-		return &image, nil
+		if _, ok := image.Snapshotters[snapshotter]; ok {
+			return &image, nil
+		}
 	}
 	// Pull image to ensure the image exists
 	// TODO: Cleaner interface
-	imageID, err := c.imageService.PullImage(ctx, ref, nil, config, runtimeHandler)
+	imageID, err := c.imageService.PullImage(ctx, ref, nil, config, runtimeHandler, snapshotter)
 	if err != nil {
 		return nil, fmt.Errorf("failed to pull image %q: %w", ref, err)
 	}
diff --git a/internal/cri/server/service.go b/internal/cri/server/service.go
index 37d66f07e..5d1546e77 100644
--- a/internal/cri/server/service.go
+++ b/internal/cri/server/service.go
@@ -97,7 +97,7 @@ type RuntimeService interface {
 type ImageService interface {
 	RuntimeSnapshotter(ctx context.Context, ociRuntime criconfig.Runtime) string
 
-	PullImage(ctx context.Context, name string, credentials func(string) (string, string, error), sandboxConfig *runtime.PodSandboxConfig, runtimeHandler string) (string, error)
+	PullImage(ctx context.Context, name string, credentials func(string) (string, string, error), sandboxConfig *runtime.PodSandboxConfig, runtimeHandler string, snapshotter string) (string, error)
 	UpdateImage(ctx context.Context, r string) error
 
 	CheckImages(ctx context.Context) error
diff --git a/internal/cri/store/image/image.go b/internal/cri/store/image/image.go
index 5887e757b..43ecf0db2 100644
--- a/internal/cri/store/image/image.go
+++ b/internal/cri/store/image/image.go
@@ -20,6 +20,7 @@ import (
 	"context"
 	"encoding/json"
 	"fmt"
+	"strings"
 	"sync"
 
 	"github.com/containerd/containerd/v2/core/content"
@@ -53,6 +54,8 @@ type Image struct {
 	ImageSpec imagespec.Image
 	// Pinned image to prevent it from garbage collection
 	Pinned bool
+	// Snapshotters is a map whose keys are snapshotters for which this image has a snapshot.
+	Snapshotters map[string]struct{}
 }
 
 // Getter is used to get images but does not make changes
@@ -170,6 +173,19 @@ func (s *Store) getImage(ctx context.Context, i images.Image) (*Image, error) {
 		return nil, fmt.Errorf("read image config from content store: %w", err)
 	}
 
+	info, err := s.provider.Info(ctx, desc.Digest)
+	if err != nil {
+		return nil, fmt.Errorf("get content store config info: %w", err)
+	}
+
+	snapshotters := make(map[string]struct{})
+	for label := range info.Labels {
+		const Prefix = "containerd.io/gc.ref.snapshot."
+		if strings.HasPrefix(label, Prefix) {
+			snapshotters[label[len(Prefix):]] = struct{}{}
+		}
+	}
+
 	var spec imagespec.Image
 	if err := json.Unmarshal(blob, &spec); err != nil {
 		return nil, fmt.Errorf("unmarshal image config %s: %w", blob, err)
@@ -178,12 +194,13 @@ func (s *Store) getImage(ctx context.Context, i images.Image) (*Image, error) {
 	pinned := i.Labels[labels.PinnedImageLabelKey] == labels.PinnedImageLabelValue
 
 	return &Image{
-		ID:         id,
-		References: []string{i.Name},
-		ChainID:    chainID.String(),
-		Size:       size,
-		ImageSpec:  spec,
-		Pinned:     pinned,
+		ID:           id,
+		References:   []string{i.Name},
+		ChainID:      chainID.String(),
+		Size:         size,
+		ImageSpec:    spec,
+		Pinned:       pinned,
+		Snapshotters: snapshotters,
 	}, nil
 
 }
-- 
2.34.1


From a54e93233bb8bf8f1bbec7c56aaee591c934198d Mon Sep 17 00:00:00 2001
From: Mitch Zhu <zhumc11@gmail.com>
Date: Tue, 19 Mar 2024 10:34:50 -0700
Subject: [PATCH 2/3] Always add TargetLayerDigestLabel label to snapshots

This label gets added when an image is pulled but not when it's unpacked
during container creation. The tardev snapshotter relies on it in the
latter case to be able to populate its own store from containerd's
content store.

Signed-off-by: Mitch Zhu <mitchzhu@microsoft.com>
---
 client/image.go | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/image.go b/client/image.go
index 355bcba73..791db887e 100644
--- a/client/image.go
+++ b/client/image.go
@@ -31,6 +31,7 @@ import (
 	"github.com/containerd/containerd/v2/internal/kmutex"
 	"github.com/containerd/containerd/v2/pkg/labels"
 	"github.com/containerd/containerd/v2/pkg/rootfs"
+	"github.com/containerd/containerd/v2/pkg/snapshotters"
 	"github.com/containerd/errdefs"
 	"github.com/containerd/platforms"
 	"github.com/opencontainers/go-digest"
@@ -333,7 +334,8 @@ func (i *image) Unpack(ctx context.Context, snapshotterName string, opts ...Unpa
 	}
 
 	for _, layer := range layers {
-		unpacked, err = rootfs.ApplyLayerWithOpts(ctx, layer, chain, sn, a, config.SnapshotOpts, config.ApplyOpts)
+		snOpts := append(config.SnapshotOpts, snapshots.WithLabels(map[string]string{snapshotters.TargetLayerDigestLabel: layer.Blob.Digest.String()}))
+		unpacked, err = rootfs.ApplyLayerWithOpts(ctx, layer, chain, sn, a, snOpts, config.ApplyOpts)
 		if err != nil {
 			return fmt.Errorf("apply layer error for %q: %w", i.Name(), err)
 		}
-- 
2.34.1


From 2cd5142def0d2f60d426b493b278912d1062dd05 Mon Sep 17 00:00:00 2001
From: Mitch Zhu <mitchzhu@microsoft.com>
Date: Wed, 16 Oct 2024 00:39:20 +0000
Subject: [PATCH 3/3] Honor the new CRI runtime handler field added to v0.29.0
 if available

Signed-off-by: Mitch Zhu <mitchzhu@microsoft.com>
---
 internal/cri/server/images/image_pull.go | 22 ++++++++++++----------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/internal/cri/server/images/image_pull.go b/internal/cri/server/images/image_pull.go
index 3d8af09f5..07c384f0e 100644
--- a/internal/cri/server/images/image_pull.go
+++ b/internal/cri/server/images/image_pull.go
@@ -97,7 +97,7 @@ import (
 // PullImage pulls an image with authentication config.
 func (c *GRPCCRIImageService) PullImage(ctx context.Context, r *runtime.PullImageRequest) (_ *runtime.PullImageResponse, err error) {
 	imageRef := r.GetImage().GetImage()
-	snapshotter, err := c.snapshotterFromPodSandboxConfig(ctx, imageRef, r.SandboxConfig)
+	snapshotter, err := c.snapshotterFromPodSandboxConfig(ctx, imageRef, r.SandboxConfig, r.GetImage().GetRuntimeHandler())
 	if err != nil {
 		return nil, err
 	}
@@ -781,17 +781,19 @@ func (rt *pullRequestReporterRoundTripper) RoundTrip(req *http.Request) (*http.R
 // Once we know the runtime, try to override default snapshotter if it is set for this runtime.
 // See https://github.com/containerd/containerd/issues/6657
 func (c *CRIImageService) snapshotterFromPodSandboxConfig(ctx context.Context, imageRef string,
-	s *runtime.PodSandboxConfig) (string, error) {
+	s *runtime.PodSandboxConfig, runtimeHandler string) (string, error) {
 	snapshotter := c.config.Snapshotter
-	if s == nil || s.Annotations == nil {
-		return snapshotter, nil
-	}
 
-	// TODO(kiashok): honor the new CRI runtime handler field added to v0.29.0
-	// for image pull per runtime class support.
-	runtimeHandler, ok := s.Annotations[annotations.RuntimeHandler]
-	if !ok {
-		return snapshotter, nil
+	if runtimeHandler == "" {
+		if s == nil || s.Annotations == nil {
+			return snapshotter, nil
+		} else {
+			ok := false
+			runtimeHandler, ok = s.Annotations[annotations.RuntimeHandler]
+			if !ok {
+				return snapshotter, nil
+			}
+		}
 	}
 
 	// TODO: Ensure error is returned if runtime not found?
-- 
2.34.1

